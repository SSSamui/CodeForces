#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <stack>
#include <algorithm>
using namespace std;
using ll = long long;
 
const int MOD = 998244353;
 
vector<int> frontdp(vector<int> a)
{
	int n = a.size();
	stack<int> see;
	for (int i = n - 1; i > -1; i--)
	{
		while (!see.empty() && (a[i] >= see.top())) see.pop();
		see.push(a[i]);
	}
 
	vector<int> l(1);
	while (!see.empty())
	{
		l.push_back(see.top());
		see.pop();
	}
 
	int m = l.size(), mx = l.back();
	vector<int> dp(m, 0), ans(0);
	dp[0] = 1;
	for (int i = 0; i < n; i++)
	{
		int ind = m;
		for (int j = m - 1; j > 0; j--) if (l[j] >= a[i]) ind = j;
		if (ind < m)
		{
			if (l[ind] == a[i])
			{
				dp[ind] *= 2;
				dp[ind] %= MOD;
				dp[ind] += dp[ind - 1];
				dp[ind] %= MOD;
				ind++;
			}
 
			while (ind < m)
			{
				dp[ind] *= 2;
				dp[ind] %= MOD;
				ind++;
			}
		}
 
		if (a[i] == mx) ans.push_back(dp[m - 2]);
	}
 
	return ans;
}
 
vector<int> backdp(vector<int> a)
{
	reverse(a.begin(), a.end());
 
	int n = a.size();
	stack<int> see;
	for (int i = n - 1; i > -1; i--)
	{
		while (!see.empty() && (a[i] >= see.top())) see.pop();
		see.push(a[i]);
	}
 
	vector<int> l(1);
	while (!see.empty())
	{
		l.push_back(see.top());
		see.pop();
	}
 
	int m = l.size(), mx = l.back();
	vector<int> dp(m, 0), ans(0);
	dp[0] = 1;
	for (int i = 0; i < n; i++)
	{
		int ind = m;
		for (int j = m - 1; j > 0; j--) if (l[j] >= a[i]) ind = j;
		if (ind < m)
		{
			if (l[ind] == a[i])
			{
				if (a[i] == mx) ans.push_back((dp[m - 1] + dp[m - 2]) % MOD);
				dp[ind] *= 2;
				dp[ind] %= MOD;
				dp[ind] += dp[ind - 1];
				dp[ind] %= MOD;
				ind++;
			}
 
			while (ind < m)
			{
				dp[ind] *= 2;
				dp[ind] %= MOD;
				ind++;
			}
		}
	}
 
	reverse(ans.begin(), ans.end());
	return ans;
}
 
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
 
	int _;
	cin >> _;
	while (_--)
	{
		int n;
		cin >> n;
		vector<int> a(n);
		for (int i = 0; i < n; i++) cin >> a[i];
 
		vector<int> l = frontdp(a), r = backdp(a);
		ll ans = 0;
		for (int i = 0; i < l.size(); i++)
		{
			ans += 1ll * l[i] * r[i];
			ans %= MOD;
		}
 
		cout << ans << "\n";
	}
}
