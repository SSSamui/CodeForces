#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
using namespace std;
using ll = long long;
 
const int MXN = 3e5 + 1;
 
vector<int> sbtreesz(MXN, 1), dep(MXN, 0), depcount(0);
vector<ll> lcapair(MXN, 0);
vector<vector<int>> adj(MXN, vector<int>(0));
 
void dfs(int node = 1, int p = 0)
{
	if (depcount.size() == dep[node]) depcount.push_back(0);
	depcount[dep[node]]++;
	for (int nxt : adj[node]) if (nxt != p)
	{
		dep[nxt] = dep[node] + 1;
		dfs(nxt, node);
		lcapair[node] += 1ll * sbtreesz[nxt] * (sbtreesz[node] - 1);
		sbtreesz[node] += sbtreesz[nxt];
	}
}
 
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
 
	int _;
	cin >> _;
	while (_--)
	{
		int n;
		cin >> n;
		for (int i = 1; i < n; i++)
		{
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v), adj[v].push_back(u);
		}
 
		dfs();
		ll ans = 0;
		int cnt = 0;
		for (int d = depcount.size() - 1; d > -1; d--)
		{
			ans += 1ll * d * depcount[d] * (depcount[d] - 1);
			ans += 2ll * d * depcount[d] * cnt;
			cnt += depcount[d];
		}
 
		for (int u = 1; u <= n; u++)
		{
			ans -= 2ll * dep[u] * (sbtreesz[u] - 1);
			ans -= lcapair[u] * (2 * dep[u] + 1);
		}
 
		cout << ans << "\n";
		depcount.clear();
		for (int u = 1; u <= n; u++) sbtreesz[u] = 1, dep[u] = 0, lcapair[u] = 0, adj[u].clear();
	}
}
