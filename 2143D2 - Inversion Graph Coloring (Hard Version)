#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
using namespace std;
 
const int MOD = 1e9 + 7;
 
struct tree
{
	int n = 0, sz = 1;
	vector<int> tree;
 
	void init(int _n)
	{
		n = _n;
		while (sz <= n) sz *= 2;
		tree.resize(2 * sz);
	}
 
	void upd(int node, int tadd)
	{
		node += sz;
		while (node > 0)
		{
			tree[node] = (tree[node] + tadd) % MOD;
			node /= 2;
		}
	}
 
	int rq(int l, int r)
	{
		int ans = 0;
		l += sz, r += sz;
		while (l <= r)
		{
			if (l % 2 == 1) ans = (ans + tree[l++]) % MOD;
			if (r % 2 == 0) ans = (ans + tree[r--]) % MOD;
			l /= 2, r /= 2;
		}
 
		return ans;
	}
};
 
struct tree2d
{
	int n = 0, sz = 1;
	vector<tree> tree;
 
	void init(int _n)
	{
		n = _n;
		while (sz <= n) sz *= 2;
		tree.resize(2 * sz);
		for (int i = 1; i < 2 * sz; i++) tree[i].init(n);
	}
 
	void upd(int a, int b, int tadd)
	{
		a += sz;
		while (a > 0)
		{
			tree[a].upd(b, tadd);
			a /= 2;
		}
	}
 
	int rq(int l1, int r1, int l2, int r2)
	{
		int ans = 0;
		l1 += sz, r1 += sz;
		while (l1 <= r1)
		{
			if (l1 % 2 == 1) ans = (ans + tree[l1++].rq(l2, r2)) % MOD;
			if (r1 % 2 == 0) ans = (ans + tree[r1--].rq(l2, r2)) % MOD;
			l1 /= 2, r1 /= 2;
		}
 
		return ans;
	}
};
 
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
 
	int _;
	cin >> _;
	while (_--)
	{
		int n;
		cin >> n;
		vector<int> a(n);
		for (int i = 0; i < n; i++) cin >> a[i];
 
		tree dp1;
		dp1.init(n);
		tree2d dp2;
		dp2.init(n);
 
		dp1.upd(0, 1);
 
		for (int i = 0; i < n; i++)
		{
			dp1.upd(a[i], dp1.rq(0, a[i]));
			for (int b = 1; b < a[i]; b++) dp2.upd(a[i], b, dp2.rq(b + 1, a[i], b, b));
			for (int b = a[i] + 1; b <= n; b++) dp2.upd(b, a[i], (dp1.rq(b, b) + dp2.rq(b, b, 0, a[i])) % MOD);
		}
 
		cout << (dp1.rq(0, n) + dp2.rq(0, n, 0, n)) % MOD << "\n";
	}
}
