#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
using namespace std;
 
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
 
	int _;
	cin >> _;
	while (_--)
	{
		int n, m, __;
		cin >> n >> m >> __;
		vector<vector<int>> nxtposs(n + 1, vector<int>(2, 0));
		vector<vector<bool>> red(n + 1, vector<bool>(2, false));
		vector<vector<int>> lst(n + 1, vector<int>(0));
		while (m--)
		{
			int u, v;
			cin >> u >> v;
			lst[v].push_back(u);
			nxtposs[u][0]++, nxtposs[u][1]++;
		}
 
		while (__--)
		{
			int k, u;
			cin >> k >> u;
			if (k == 2)
			{
				if (red[u][0]) cout << "NO\n";
				else cout << "YES\n";
			}
 
			else
			{
				queue<pair<int, int>> tprc;
				tprc.push({ u, 0 }), tprc.push({ u, 1 });
				while (!tprc.empty())
				{
					int a = tprc.front().first, b = tprc.front().second;
					tprc.pop(), nxtposs[a][b] = 0;
					if (!red[a][b])
					{
						red[a][b] = true;
						if (b == 0) { for (int lstnde : lst[a]) tprc.push({ lstnde, 1 }); }
						else
						{
							for (int lstnde : lst[a]) if (!red[lstnde][0])
							{
								nxtposs[lstnde][0]--;
								if (nxtposs[lstnde][0] == 0) tprc.push({ lstnde, 0 });
							}
						}
					}
				}
			}
		}
	}
}
