#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
using namespace std;
using pii = pair<int, int>;

vector<pii> add(vector<pii> a, vector<pii> b)
{
	for (int i = 0; i < 2; i++) if (b[i].first > 0)
	{
		int ind = -1;
		for (int j = 0; j < 2; j++) if (b[i].first == a[j].first) ind = j;
		if (ind > -1) a[ind].second += b[i].second;
		else
		{
			for (int j = 0; j < 2; j++) if (a[j].second == 0) ind = j;
			if (ind > -1) a[ind] = b[i];
			else
			{
				int mn = b[i].second;
				for (int j = 0; j < 2; j++) mn = min(mn, a[j].second);
				b[i].second -= mn;
				for (int j = 0; j < 2; j++) a[j].second -= mn;
				for (int j = 0; j < 2; j++) if (a[j].second == 0)
				{
					if (b[i].second == 0) a[j].first = 0;
					else
					{
						a[j] = b[i];
						b[i].second = 0;
					}
				}
			}
		}
	}

	return a;
}

struct tree
{
	int n = 0, sz = 0;
	vector<vector<pii>> ctree;

	void init(vector<int> a)
	{
		n = a.size();
		sz = 1;
		while (sz < n) sz *= 2;
		ctree.resize(2 * sz);
		for (int i = 0; i < 2 * sz; i++) ctree[i].resize(2);
		for (int i = 0; i < n; i++) ctree[i + sz][0] = { a[i], 1 }, ctree[i + sz][1] = { 0, 0 };
		for (int i = sz - 1; i > 0; i--)
		{
			int lc = 2 * i, rc = 2 * i + 1;
			ctree[i] = add(ctree[lc], ctree[rc]);
		}
	}

	vector<pii> rq(int l, int r)
	{
		l += sz, r += sz;
		vector<pii> ans = { {0, 0}, {0, 0} };
		while (l <= r)
		{
			if (l % 2 == 1) ans = add(ans, ctree[l++]);
			if (r % 2 == 0) ans = add(ans, ctree[r--]);
			l /= 2, r /= 2;
		}

		return ans;
	}
};

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	int _;
	cin >> _;
	while (_--)
	{
		int n, __;
		cin >> n >> __;
		vector<int> a(n);
		for (int i = 0; i < n; i++) cin >> a[i];

		map<int, vector<int>> inv;
		for (int i = 0; i < n; i++) inv[a[i]].push_back(i);

		tree qtree;
		qtree.init(a);

		while (__--)
		{
			int l, r;
			cin >> l >> r;
			l--, r--;
			vector<pii> res = qtree.rq(l, r);
			vector<int> ans(0);
			for (int i = 0; i < 2; i++) if (res[i].first > 0)
			{
				int curr = res[i].first;
				int cl = 0, cr = inv[curr].size() - 1;
				while (cl < cr)
				{
					int mid = cl + (cr - cl) / 2;
					if (inv[curr][mid] < l) cl = mid + 1;
					else cr = mid;
				}

				int fl = cl;
				cl = 0, cr = inv[curr].size() - 1;
				while (cl < cr)
				{
					int mid = cl + (cr - cl + 1) / 2;
					if (inv[curr][mid] > r) cr = mid - 1;
					else cl = mid;
				}

				int fr = cl;
				int lbound = (r - l + 1) / 3;
				if (fr - fl + 1 > lbound) ans.push_back(curr);
			}

			if (ans.size() == 0) cout << "-1\n";
			else if (ans.size() == 1) cout << ans[0] << "\n";
			else
			{
				if (ans[0] > ans[1]) swap(ans[0], ans[1]);
				cout << ans[0] << ' ' << ans[1] << "\n";
			}
		}
	}
}
